name: CI - App Build & Test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: subscription_manager_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/subscription_manager_test?schema=public
      run: npx prisma migrate deploy

    - name: Run linter
      run: npm run lint

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/subscription_manager_test?schema=public
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 3000
      run: npm test

    - name: Run test coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/subscription_manager_test?schema=public
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 3000
      run: npm run test:cov

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_OWNER: ${{ secrets.DOCKER_USERNAME || github.repository_owner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Compute dynamic image tag (branch-YYYYMMDD-HHMMSS)
      run: |
        BRANCH="$GITHUB_REF_NAME"
        SLUG=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._-]+/-/g' | sed -E 's/^-+|-+$//g' | cut -c1-128)
        TS=$(date -u +%Y%m%d-%H%M%S)
        echo "BRANCH_TIMESTAMP_TAG=${SLUG}-${TS}" >> $GITHUB_ENV

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKER_OWNER }}/subscription-manager
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ env.BRANCH_TIMESTAMP_TAG }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

