name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check code formatting
      run: npm run format

    - name: Run linter
      run: npm run lint

    - name: Type checking
      run: npx tsc --noEmit

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: subscription_manager_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/subscription_manager_test?schema=public
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 3000
      run: npm run test:cov

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverageFile = './coverage/coverage-summary.json';
          
          if (fs.existsSync(coverageFile)) {
            const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
            const total = coverage.total;
            
            const comment = `## Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${total.lines.pct}% |
            | Statements | ${total.statements.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
            
            âœ… All tests passed!`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }