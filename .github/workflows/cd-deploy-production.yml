name: CD - Deploy to Production

on:
  workflow_run:
    workflows: ["CI - App Build & Test"]
    types:
      - completed

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'develop') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Debug workflow information
      run: |
        echo "Workflow that triggered this: ${{ github.event.workflow_run.name }}"
        echo "Branch: ${{ github.event.workflow_run.head_branch }}"
        echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Event: ${{ github.event.workflow_run.event }}"
        echo "SHA: ${{ github.event.workflow_run.head_sha }}"
        echo "Deploying from branch: ${{ github.event.workflow_run.head_branch }}"
        echo "Current job condition: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && (github.event.workflow_run.head_branch == 'main' || github.event.workflow_run.head_branch == 'develop') }}"

    - name: Copy compose and configs to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        source: |
          docker-compose.yml
          init.sql
        target: /opt/subscription-manager

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/subscription-manager
          
          # Set environment variables for docker-compose
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export IMAGE_TAG=${{ github.event.workflow_run.head_branch }}
          echo "Environment variables set: DOCKER_USERNAME=$DOCKER_USERNAME, IMAGE_TAG=$IMAGE_TAG"
          
          # Create backup
          echo "Creating backup..."
          docker compose ps -q | xargs -r docker stop
          
          # Pull latest image based on branch (tagged by CI workflow)
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/subscription-manager:$BRANCH_NAME"
          echo "Pulling latest image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          
          # Deploy
          echo "Starting services..."
          docker compose up -d --build
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 20
          
          # Health check with retry logic
          echo "Performing health check..."
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
              exit 0
            fi

            echo "Attempt $((attempt + 1))/$max_attempts: Application not ready yet..."
            sleep 5
            attempt=$((attempt + 1))
          done

          echo "❌ Application failed health check after $max_attempts attempts"
          echo "Checking service status..."
          docker compose ps
          echo "Application logs:"
          docker compose logs app
          exit 1
